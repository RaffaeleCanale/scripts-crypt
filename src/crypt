#!/bin/bash

function printHelp() {
    cat << EOF

    Tools to encrypt/decrypt files.

    `echoGreen Usage:` ${PROGNAME} `echoBlue "[action] [target]"` `echoViolet [OPTIONS]`

        `echoBlue action`
            `echoBlue encrypt` : Encrypt the given file using symmetric encryption
            `echoBlue decrypt` : Decrypt the given file (must be a .gpg file)
            `echoBlue edit`    : Decrypt the given file into a temporary location and opens it with the
                      default application. Then, if the temporary file is modified, the file is re-encrypted.
            `echoBlue view`    : Decrypt the given file into a temporary location and view it with the
                      default application.

        `echoBlue target`: File to  encrypt/decrypt

            `echoViolet "-o|--output"`: output file (otherwise a default name is selected)
            `echoViolet "--stdout"`   : (only for decrypt) Outputs the content to stdout instead of a file
            `echoViolet "--open-with"`: (only for edit|view) Command to use to open the file (default is 'xdg-open')

EOF
}

function declareConstants() {
    return 0
}


function loadOptions() {
    # unusedBehaviour="IGNORE"
    READONLY=false getOpt "--stdout" useStdout
    READONLY=false getOpt "-o|--output" output 1 ""
    getOpt "--open-with" openWith 1 "xdg-open"
    return 0
}


function encrypt() {
    if [ -z "$output" ]; then
        output="${inputFile}.gpg"
    fi

    local options="--yes --symmetric --batch --passphrase-fd 0"

    if ! $useStdout; then
        options="$options --output \"$output\""
    else
        error "Encrypt to stdout not supported yet"
    fi

    eval "gpg2 $options \"$inputFile\" <<< \"$password\" 2> /dev/null"
}

function decrypt() {
    getFileNameAndExtension filename,ext "$inputFile"
    if [ "$ext" != ".gpg" ]; then
        filename="$inputFile"
        inputFile="${inputFile}.gpg"
    fi

    if [ -z "$output" ]; then
        getFreshFile output "$filename"
    fi

    local options="--yes --decrypt --batch --passphrase-fd 0"

    if ! $useStdout; then
        options="$options --output \"$output\""
    fi

    eval "gpg2 $options \"$inputFile\" <<< \"$password\" 2> /dev/null || error \"Wrong password\""
}

function view() {
    local tmpFile

    createTmpFile tmpFile
    output="$tmpFile" useStdout=false decrypt

    $openWith "$tmpFile"
    
    sleep 2
}

function edit() {
    local tmpFile
    local tmpTimestamp
    local newTimestamp


    createTmpFile tmpFile
    output="$tmpFile" useStdout=false decrypt

    tmpTimestamp=`date -r "$tmpFile" +%s`
    $openWith "$tmpFile"

    newTimestamp=`date -r "$tmpFile" +%s`
    if [ $tmpTimestamp -eq $newTimestamp ]; then
        inputChar _ "Press any key to save changes (if any)"
    fi

    newTimestamp=`date -r "$tmpFile" +%s`
    if [ $tmpTimestamp -ne $newTimestamp ]; then
        echo "Saving changes..."
        trash "$inputFile"
        output="$inputFile" inputFile="$tmpFile" useStdout=false encrypt
    fi
}

function run () {
    READONLY=false getArg mode,inputFile

    if ! [[ "$mode" =~ ^(encrypt|decrypt|edit|view)$ ]]; then
        error "Mode must be one of: encrypt, decrypt, view or edit"
    fi
    test -f "$inputFile" || error "Input file does not exist"

    inputPassword password

    $mode

    return 0
}

source "__STARTER__@v1"
